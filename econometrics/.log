2023-03-14 18:48:58,449 [29478] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-14 18:48:58,449 [29478] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-14 18:48:58,449 [29478] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-14 18:48:58,452 [29478] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-14 18:48:58,452 [29478] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-14 18:48:58,452 [29478] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-14 18:48:58,966 [29478] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-14 18:48:58,966 [29478] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-14 18:48:58,966 [29478] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-14 18:48:58,971 [29478] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-14 18:48:58,972 [29478] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-14 18:48:58,972 [29478] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-14 18:49:14,075 [29478] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-14 18:49:14,089 [29478] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-14 18:49:14,092 [29478] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-14 18:49:14,092 [29478] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-14 18:49:14,092 [29478] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-14 18:49:14,092 [29478] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', '__future__', 'tornado', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'numbers', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-14 18:49:14,128 [29478] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-14 18:49:14,131 [29478] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-14 18:49:14,256 [29478] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-14 18:49:14,260 [29478] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-14 18:50:02,516 [29478] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2023-03-14 18:50:02,517 [29478] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2023-03-14 18:50:02,518 [29478] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2023-03-14 18:50:02,519 [29478] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2023-03-14 18:58:00,986 [29478] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,987 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,988 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:00,989 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,990 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,991 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,992 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,993 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,993 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,993 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-14 18:58:00,993 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:00,993 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:00,994 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-14 18:58:00,994 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-14 18:58:00,994 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,994 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,994 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,995 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,995 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,995 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,995 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,995 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,996 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,996 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,996 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,996 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-14 18:58:00,997 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-14 18:58:00,997 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,997 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,997 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:00,997 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:00,998 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,998 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:00,998 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,998 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,999 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-14 18:58:00,999 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,999 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,999 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:00,999 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,000 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,000 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,000 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-14 18:58:01,000 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,000 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,001 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,002 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-14 18:58:01,003 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,004 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,005 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,006 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,007 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,008 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,009 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,009 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,009 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,009 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,009 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,009 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-14 18:58:01,010 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,011 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,012 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-14 18:58:01,013 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,014 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,015 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,016 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,017 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,018 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-14 18:58:01,019 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-14 18:58:01,019 [29478] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-14 18:58:01,019 [29478] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-03-20 15:31:41,472 [32848] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-20 15:31:41,473 [32848] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-20 15:31:41,473 [32848] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-20 15:31:41,475 [32848] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-20 15:31:41,475 [32848] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-20 15:31:41,475 [32848] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-20 17:56:31,837 [32848] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-20 17:56:31,852 [32848] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-20 17:56:31,854 [32848] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-20 17:56:31,854 [32848] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-20 17:56:31,854 [32848] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-20 17:56:31,855 [32848] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', '__future__', 'tornado', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'numbers', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'statsmodels._version', 'statsmodels', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'statsmodels.tools.data', 'statsmodels.tools.validation.validation', 'statsmodels.tools.validation', 'statsmodels.tools.tools', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'statsmodels.tools._testing', 'statsmodels.tools', 'patsy.version', 'patsy.origin', 'patsy.compat', 'patsy.util', 'patsy.infix_parser', 'patsy.tokens', 'patsy.parse_formula', 'patsy.constraint', 'patsy.contrasts', 'patsy.categorical', 'patsy.state', 'patsy.splines', 'patsy.mgcv_cubic_splines', 'patsy.builtins', 'patsy.eval', 'patsy.desc', 'patsy.design_info', 'patsy.redundancy', 'patsy.missing', 'patsy.build', 'patsy.highlevel', 'patsy.user_util', 'patsy', 'statsmodels.formula.formulatools', 'statsmodels.formula', 'statsmodels.compat.python', 'statsmodels.compat', 'statsmodels.compat.pandas', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib.decorator', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy._lib.messagestream', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._highs', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._linprog_highs', 'scipy.linalg._interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg.interpolative', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog_doc', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.spatial.ckdtree', 'scipy.spatial.kdtree', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.optimize', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._rbfinterp_pythran', 'scipy.interpolate._rbfinterp', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'beta_ufunc', 'scipy.stats._boost.beta_ufunc', 'binom_ufunc', 'scipy.stats._boost.binom_ufunc', 'nbinom_ufunc', 'scipy.stats._boost.nbinom_ufunc', 'scipy.stats._boost', 'scipy.stats._continuous_distns', 'scipy.stats.biasedurn', 'scipy.stats._discrete_distns', 'scipy.stats._entropy', 'scipy.stats.distributions', 'scipy._lib._bunch', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats._common', 'scipy.stats._relative_risk', 'scipy.stats._crosstab', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binomtest', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._sobol', 'scipy.stats._qmc_cy', 'scipy.stats._qmc', 'scipy.stats.qmc', 'scipy.stats._multivariate', 'scipy.stats._bootstrap', 'scipy.stats._page_trend_test', 'scipy.stats._mannwhitneyu', 'scipy.stats', 'statsmodels.base', 'statsmodels.tools.sm_exceptions', 'statsmodels.tools.decorators', 'statsmodels.base.data', 'statsmodels.base.optimizer', 'statsmodels.base.wrapper', 'statsmodels.stats', 'statsmodels.iolib.openfile', 'statsmodels.iolib.foreign', 'statsmodels.iolib.table', 'statsmodels.iolib.smpickle', 'statsmodels.iolib', 'statsmodels.iolib.tableformatting', 'statsmodels.iolib.summary2', 'statsmodels.stats._knockoff', 'statsmodels.stats.multitest', 'statsmodels.stats.contrast', 'statsmodels.tools.numdiff', 'statsmodels.base.model', 'statsmodels.emplike', 'statsmodels.graphics', 'statsmodels.graphics.utils', 'statsmodels.emplike.descriptive', 'statsmodels.emplike.elregress', 'statsmodels.regression._prediction', 'statsmodels.regression.linear_model', 'statsmodels.regression', 'statsmodels.discrete', 'statsmodels.base.l1_solvers_common', 'statsmodels.base.l1_slsqp', 'statsmodels.distributions.empirical_distribution', 'statsmodels.distributions.edgeworth', 'statsmodels.distributions.discrete', 'statsmodels.distributions', 'statsmodels.discrete.discrete_model', 'statsmodels.base._penalties', 'statsmodels.regression.mixed_linear_model', 'statsmodels.genmod', 'statsmodels.genmod._prediction', 'statsmodels.graphics._regressionplots_doc', 'statsmodels.regression._tools', 'statsmodels.genmod.families.links', 'statsmodels.genmod.families.varfuncs', 'statsmodels.genmod.families.family', 'statsmodels.genmod.families', 'statsmodels.genmod.generalized_linear_model', 'statsmodels.robust.norms', 'statsmodels.robust._qn', 'statsmodels.robust.scale', 'statsmodels.robust', 'statsmodels.robust.robust_linear_model', 'statsmodels.regression.quantile_regression', 'statsmodels.duration', 'statsmodels.duration.hazard_regression', 'statsmodels.stats.correlation_tools', 'statsmodels.genmod.cov_struct', 'statsmodels.discrete.discrete_margins', 'statsmodels.genmod.generalized_estimating_equations', 'statsmodels.gam', 'statsmodels.tools.linalg', 'statsmodels.base._penalized', 'statsmodels.gam.gam_penalties', 'statsmodels.gam.gam_cross_validation', 'statsmodels.gam.smooth_basis', 'statsmodels.gam.gam_cross_validation.gam_cross_validation', 'statsmodels.gam.gam_cross_validation.cross_validators', 'statsmodels.gam.generalized_additive_model', 'statsmodels.formula.api', 'statsmodels.datasets.utils', 'statsmodels.datasets.anes96.data', 'statsmodels.datasets.anes96', 'statsmodels.datasets.cancer.data', 'statsmodels.datasets.cancer', 'statsmodels.datasets.ccard.data', 'statsmodels.datasets.ccard', 'statsmodels.datasets.china_smoking.data', 'statsmodels.datasets.china_smoking', 'statsmodels.datasets.co2.data', 'statsmodels.datasets.co2', 'statsmodels.datasets.committee.data', 'statsmodels.datasets.committee', 'statsmodels.datasets.copper.data', 'statsmodels.datasets.copper', 'statsmodels.datasets.cpunish.data', 'statsmodels.datasets.cpunish', 'statsmodels.datasets.danish_data.data', 'statsmodels.datasets.danish_data', 'statsmodels.datasets.elnino.data', 'statsmodels.datasets.elnino', 'statsmodels.datasets.engel.data', 'statsmodels.datasets.engel', 'statsmodels.datasets.fair.data', 'statsmodels.datasets.fair', 'statsmodels.datasets.fertility.data', 'statsmodels.datasets.fertility', 'statsmodels.datasets.grunfeld.data', 'statsmodels.datasets.grunfeld', 'statsmodels.datasets.heart.data', 'statsmodels.datasets.heart', 'statsmodels.datasets.interest_inflation.data', 'statsmodels.datasets.interest_inflation', 'statsmodels.datasets.longley.data', 'statsmodels.datasets.longley', 'statsmodels.datasets.macrodata.data', 'statsmodels.datasets.macrodata', 'statsmodels.datasets.modechoice.data', 'statsmodels.datasets.modechoice', 'statsmodels.datasets.nile.data', 'statsmodels.datasets.nile', 'statsmodels.datasets.randhie.data', 'statsmodels.datasets.randhie', 'statsmodels.datasets.scotland.data', 'statsmodels.datasets.scotland', 'statsmodels.datasets.spector.data', 'statsmodels.datasets.spector', 'statsmodels.datasets.stackloss.data', 'statsmodels.datasets.stackloss', 'statsmodels.datasets.star98.data', 'statsmodels.datasets.star98', 'statsmodels.datasets.statecrime.data', 'statsmodels.datasets.statecrime', 'statsmodels.datasets.strikes.data', 'statsmodels.datasets.strikes', 'statsmodels.datasets.sunspots.data', 'statsmodels.datasets.sunspots', 'statsmodels.datasets', 'statsmodels.__init__', 'statsmodels.discrete.count_model', 'statsmodels.duration.survfunc', 'statsmodels.duration.api', 'statsmodels.emplike.originregress', 'statsmodels.emplike.elanova', 'statsmodels.emplike.aft_el', 'statsmodels.emplike.api', 'statsmodels.gam.api', 'statsmodels.genmod.bayes_mixed_glm', 'statsmodels.genmod.api', 'statsmodels.tsa', 'statsmodels.compat.numpy', 'statsmodels.compat.scipy', 'scipy.signal.sigtools', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy.signal.windows.windows', 'scipy.signal.windows', 'scipy.signal.waveforms', 'scipy.signal._max_len_seq_inner', 'scipy.signal._max_len_seq', 'scipy.signal._upfirdn_apply', 'scipy.signal._upfirdn', 'scipy.signal.spline', 'scipy.signal.bsplines', 'scipy.signal.filter_design', 'scipy.signal.fir_filter_design', 'scipy.signal.lti_conversion', 'scipy.signal.ltisys', 'scipy.signal._arraytools', 'scipy.signal._sosfilt', 'scipy.signal.signaltools', 'scipy.signal._savitzky_golay', 'scipy.signal._spectral', 'scipy.signal.spectral', 'scipy.signal.wavelets', 'scipy.signal._peak_finding_utils', 'scipy.signal._peak_finding', 'scipy.signal', 'statsmodels.tsa._bds', 'statsmodels.tsa._innovations', 'statsmodels.tsa.adfvalues', 'statsmodels.tsa.tsatools', 'statsmodels.tsa.stattools', 'statsmodels.graphics.tsaplots', 'statsmodels.graphics.agreement', 'statsmodels.graphics.boxplots', 'statsmodels.graphics.correlation', 'statsmodels.graphics.plottools', 'statsmodels.graphics.factorplots', 'statsmodels.multivariate', 'statsmodels.multivariate.pca', 'statsmodels.nonparametric', 'statsmodels.nonparametric.kernels', 'joblib.hashing', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.connection', 'joblib.externals.loky.backend.compat_posix', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'multiprocessing.synchronize', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend._posix_reduction', 'joblib.externals.cloudpickle.compat', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'joblib.externals.loky.backend.queues', 'joblib.externals.loky.backend.utils', 'joblib.externals.loky.initializers', 'concurrent.futures.process', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib.parallel', 'joblib', 'statsmodels.nonparametric._kernel_base', 'statsmodels.nonparametric.kernel_density', 'statsmodels.graphics.functional', 'statsmodels.graphics.gofplots', 'statsmodels.nonparametric._smoothers_lowess', 'statsmodels.nonparametric.smoothers_lowess', 'statsmodels.sandbox', 'statsmodels.sandbox.regression', 'statsmodels.sandbox.regression.predstd', 'statsmodels.graphics.regressionplots', 'statsmodels.graphics.api', 'statsmodels.imputation', 'statsmodels.imputation.bayes_mi', 'statsmodels.imputation.mice', 'statsmodels.multivariate.multivariate_ols', 'statsmodels.multivariate.manova', 'statsmodels.multivariate.factor_rotation._analytic_rotation', 'statsmodels.multivariate.factor_rotation._gpa_rotation', 'statsmodels.multivariate.factor_rotation._wrappers', 'statsmodels.multivariate.factor_rotation', 'statsmodels.multivariate.factor', 'statsmodels.multivariate.cancorr', 'statsmodels.multivariate.api', 'statsmodels.sandbox.nonparametric', 'statsmodels.sandbox.nonparametric.kernels', 'statsmodels.nonparametric.bandwidths', 'statsmodels.nonparametric.kdetools', 'statsmodels.nonparametric.linbin', 'statsmodels.nonparametric.kde', 'statsmodels.nonparametric.kernel_regression', 'statsmodels.nonparametric.kernels_asymmetric', 'statsmodels.nonparametric.api', 'statsmodels.tsa.statespace', 'statsmodels.tools.eval_measures', 'statsmodels.tsa.base', 'statsmodels.tsa.base.prediction', 'statsmodels.tsa.base.tsa_model', 'statsmodels.iolib.summary', 'statsmodels.tsa.statespace.news', 'statsmodels.tsa.statespace._tools', 'statsmodels.tsa.statespace._representation', 'statsmodels.tsa.statespace._initialization', 'statsmodels.tsa.statespace._filters', 'statsmodels.tsa.statespace._filters._conventional', 'statsmodels.tsa.statespace._filters._univariate', 'statsmodels.tsa.statespace._filters._univariate_diffuse', 'statsmodels.tsa.statespace._filters._inversions', 'statsmodels.tsa.statespace._kalman_filter', 'statsmodels.tsa.statespace._smoothers', 'statsmodels.tsa.statespace._smoothers._conventional', 'statsmodels.tsa.statespace._smoothers._univariate', 'statsmodels.tsa.statespace._smoothers._univariate_diffuse', 'statsmodels.tsa.statespace._smoothers._classical', 'statsmodels.tsa.statespace._smoothers._alternative', 'statsmodels.tsa.statespace._kalman_smoother', 'statsmodels.tsa.statespace._simulation_smoother', 'statsmodels.tsa.statespace._cfa_simulation_smoother', 'statsmodels.tsa.statespace.tools', 'statsmodels.tsa.statespace.initialization', 'statsmodels.tsa.statespace.representation', 'statsmodels.tsa.statespace.kalman_filter', 'statsmodels.tsa.statespace.kalman_smoother', 'statsmodels.tsa.statespace.cfa_simulation_smoother', 'statsmodels.tsa.statespace.simulation_smoother', 'statsmodels.tsa.statespace.mlemodel', 'statsmodels.regression.recursive_ls', 'statsmodels.stats._lilliefors_critical_values', 'statsmodels.stats.tabledist', 'statsmodels.stats._lilliefors', 'statsmodels.stats._adnorm', 'statsmodels.stats.diagnostic', 'statsmodels.sandbox.stats', 'statsmodels.sandbox.stats.multicomp', 'statsmodels.stats.multicomp', 'statsmodels.stats.gof', 'statsmodels.stats.stattools', 'statsmodels.tools.grouputils', 'statsmodels.stats.moment_helpers', 'statsmodels.stats.sandwich_covariance', 'statsmodels.stats.weightstats', 'statsmodels.tools.testing', 'statsmodels.stats.base', 'statsmodels.stats.proportion', 'statsmodels.stats.rates', 'statsmodels.stats.robust_compare', 'statsmodels.stats.oneway', 'statsmodels.stats.multivariate', 'statsmodels.tools.rootfinding', 'statsmodels.stats.power', 'statsmodels.tools.docstring', 'statsmodels.stats.descriptivestats', 'statsmodels.stats.anova', 'statsmodels.stats.inter_rater', 'statsmodels.stats.oaxaca', 'statsmodels.sandbox.stats.runs', 'statsmodels.stats.contingency_tables', 'statsmodels.stats.mediation', 'statsmodels.stats.meta_analysis', 'statsmodels.stats.api', 'statsmodels.tools.print_version', 'webbrowser', 'statsmodels.tools.web', 'statsmodels.tsa.interp.denton', 'statsmodels.tsa.interp', 'statsmodels.tsa.vector_ar', 'statsmodels.tsa.arima_process', 'statsmodels.tsa.deterministic', 'statsmodels.tsa.ar_model', 'statsmodels.tsa.ardl.pss_critical_values', 'statsmodels.tsa.ardl.model', 'statsmodels.tsa.ardl', 'statsmodels.tsa.arima', 'statsmodels.tsa.arima.tools', 'statsmodels.tsa.arima.specification', 'statsmodels.tsa.arima.params', 'statsmodels.tsa.statespace.sarimax', 'statsmodels.tsa.arima.estimators', 'statsmodels.tsa.arima.estimators.yule_walker', 'statsmodels.tsa.arima.estimators.burg', 'statsmodels.tsa.arima.estimators.hannan_rissanen', 'statsmodels.tsa.innovations', 'statsmodels.tsa.innovations._arma_innovations', 'statsmodels.tsa.innovations.arma_innovations', 'statsmodels.tsa.arima.estimators.innovations', 'statsmodels.tsa.arima.estimators.statespace', 'statsmodels.tsa.arima.estimators.gls', 'statsmodels.tsa.arima.model', 'statsmodels.tsa.arima.api', 'statsmodels.tsa.base.datetools', 'statsmodels.tsa.exponential_smoothing', 'statsmodels.base.covtype', 'statsmodels.tsa.exponential_smoothing.base', 'statsmodels.tsa.exponential_smoothing._ets_smooth', 'statsmodels.tsa.exponential_smoothing.initialization', 'statsmodels.tsa.exponential_smoothing.ets', 'statsmodels.tsa.filters', 'statsmodels.tsa.filters.bk_filter', 'statsmodels.tsa.filters.hp_filter', 'statsmodels.tsa.filters.cf_filter', 'scipy.fftpack.helper', 'scipy.fftpack.basic', 'scipy.fftpack.convolve', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.realtransforms', 'scipy.fftpack', 'statsmodels.tsa.filters.filtertools', 'statsmodels.tsa.filters.api', 'statsmodels.tsa.forecasting', 'statsmodels.tsa._stl', 'statsmodels.tsa.seasonal', 'statsmodels.tsa.forecasting.stl', 'statsmodels.tsa.holtwinters._exponential_smoothers', 'statsmodels.tsa.holtwinters._smoothers', 'statsmodels.tsa.holtwinters.results', 'statsmodels.tsa.holtwinters.model', 'statsmodels.tsa.holtwinters', 'statsmodels.tsa.innovations.api', 'statsmodels.tsa.regime_switching', 'statsmodels.tsa.regime_switching._hamilton_filter', 'statsmodels.tsa.regime_switching._kim_smoother', 'statsmodels.tsa.regime_switching.markov_switching', 'statsmodels.tsa.regime_switching.markov_regression', 'statsmodels.tsa.regime_switching.markov_autoregression', 'statsmodels.tsa.statespace.exponential_smoothing', 'statsmodels.tsa.statespace.api', 'statsmodels.tsa.vector_ar.output', 'statsmodels.tsa.vector_ar.util', 'statsmodels.tsa.vector_ar.plotting', 'statsmodels.tsa.vector_ar.hypothesis_test_results', 'statsmodels.tsa.vector_ar.irf', 'statsmodels.tsa.vector_ar.var_model', 'statsmodels.tsa.statespace.dynamic_factor', 'statsmodels.tsa.statespace._quarterly_ar1', 'statsmodels.tsa.statespace.dynamic_factor_mq', 'statsmodels.tsa.statespace.structural', 'statsmodels.tsa.statespace.varmax', 'statsmodels.tsa.vector_ar.svar_model', 'statsmodels.tsa.coint_tables', 'statsmodels.tsa.vector_ar.vecm', 'statsmodels.tsa.x13', 'statsmodels.tsa.api', 'statsmodels.api', 'pandas.io.formats.string', 'pandas.io.formats.html', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-20 17:56:31,888 [32848] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-20 17:56:31,890 [32848] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-20 17:56:32,016 [32848] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-20 17:56:32,018 [32848] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-20 17:57:56,661 [32848] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,662 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,663 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,664 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,665 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,666 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,667 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,668 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,669 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,670 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,671 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,672 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,673 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,674 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,675 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,676 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 17:57:56,677 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,678 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,678 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-20 17:57:56,678 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-20 17:57:56,678 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 17:57:56,678 [32848] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-20 19:59:06,586 [32848] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-20 19:59:06,587 [32848] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-20 19:59:06,588 [32848] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-20 19:59:06,594 [32848] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-20 19:59:06,595 [32848] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-20 19:59:06,596 [32848] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-20 21:45:54,530 [32848] WARNING  py.warnings:109: [JupyterRequire] /tmp/ipykernel_32848/969522989.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.
  df_matrix.median()

2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0.
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,495 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,496 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,497 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,498 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-20 21:52:04,499 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,500 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,501 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,502 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,503 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,504 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,505 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-20 21:52:04,506 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,507 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,508 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-20 21:52:04,509 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,510 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 21:52:04,511 [32848] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-20 22:05:56,100 [32848] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7f1dfbb160>
2023-03-20 22:05:56,101 [32848] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7f1dfbb160> on colorbar
2023-03-20 22:05:56,101 [32848] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-20 22:05:56,147 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,201 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,202 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-20 22:05:56,203 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,204 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,205 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,206 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,207 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,208 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,209 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,210 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,211 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,212 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,213 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,214 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,215 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,216 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-20 22:05:56,217 [32848] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-20 22:05:56,247 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:05:56,302 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:05:56,390 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:05:56,461 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:08:20,899 [32848] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7f1de12e80>
2023-03-20 22:08:20,899 [32848] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7f1de12e80> on colorbar
2023-03-20 22:08:20,899 [32848] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-20 22:08:20,943 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:08:21,030 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:08:21,086 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:08:21,173 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:08:21,245 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 22:32:21,367 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-20 22:32:21,398 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-03-20 22:49:30,351 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 22:49:30,352 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 16; new: 1
2023-03-20 22:49:30,352 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:16] new[1:1]
2023-03-20 22:49:30,353 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 22:49:30,353 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 22:49:30,466 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/frame.py
2023-03-20 22:49:30,503 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/__init__.py
2023-03-20 22:49:30,506 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/__init__.py
2023-03-20 22:49:30,614 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/generic.py
2023-03-20 22:49:30,664 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/base.py
2023-03-20 22:49:30,674 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/accessor.py
2023-03-20 22:49:30,712 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/indexing.py
2023-03-20 22:49:30,736 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/arraylike.py
2023-03-20 23:01:49,684 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:01:49,685 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:01:49,685 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:01:49,685 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:01:49,686 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:01:49,750 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/__init__.py
2023-03-20 23:01:49,752 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/__init__.py
2023-03-20 23:01:49,763 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/wrapper.py
2023-03-20 23:02:28,672 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:02:28,672 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:02:28,673 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:02:28,673 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:02:28,673 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:02:34,135 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:02:34,135 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:02:34,136 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:02:34,136 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:02:34,136 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:12:27,944 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:12:27,945 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:12:27,946 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:12:27,946 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:12:27,947 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:12:27,952 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/formula/api.py
2023-03-20 23:12:30,008 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:12:30,009 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:12:30,009 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:12:30,010 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:12:30,010 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:24:27,349 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:24:27,349 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:24:27,350 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:24:27,351 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:24:27,351 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:24:27,379 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/_typing.py
2023-03-20 23:24:27,420 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/typing.py
2023-03-20 23:24:27,439 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2023-03-20 23:24:27,507 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/types.py
2023-03-20 23:24:27,517 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/types.pyi
2023-03-20 23:24:27,581 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/series.py
2023-03-20 23:28:06,720 [32848] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7f14651eb0>
2023-03-20 23:28:06,721 [32848] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7f14651eb0> on colorbar
2023-03-20 23:28:06,721 [32848] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-20 23:28:06,797 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 23:28:07,570 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 23:28:07,657 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 23:28:07,818 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 23:28:07,940 [32848] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-20 23:53:45,479 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-20 23:53:45,479 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-20 23:53:45,480 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-20 23:53:45,480 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-20 23:53:45,480 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-20 23:53:45,531 [32848] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/regression/linear_model.py
2023-03-21 00:02:55,310 [32848] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 00:02:55,311 [32848] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 00:02:55,312 [32848] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 00:02:55,312 [32848] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 00:02:55,312 [32848] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 12:13:08,802 [59657] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-21 12:13:08,803 [59657] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-21 12:13:08,803 [59657] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-21 12:13:08,808 [59657] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-21 12:13:08,808 [59657] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-21 12:13:08,809 [59657] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-21 12:28:59,784 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-21 12:29:08,505 [59657] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-21 12:29:08,518 [59657] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-21 12:29:08,522 [59657] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-21 12:29:08,522 [59657] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-21 12:29:08,523 [59657] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-21 12:29:08,523 [59657] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', '__future__', 'tornado', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'numbers', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jedi.inference.finder', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-21 12:29:08,576 [59657] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-21 12:29:08,579 [59657] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-21 12:29:08,883 [59657] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-21 12:29:08,888 [59657] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-21 12:29:42,378 [59657] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,379 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,380 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,381 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-21 12:29:42,382 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,383 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,384 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,385 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,386 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,387 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,388 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,389 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-21 12:29:42,390 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,391 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,392 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,393 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,394 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,395 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,396 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,397 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,398 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,399 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,400 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,401 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,402 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,403 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:42,404 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:42,405 [59657] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-21 12:29:50,962 [59657] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0.
2023-03-21 12:29:50,963 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,963 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,964 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,965 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,966 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,967 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,968 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:50,969 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,970 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,971 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,972 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,973 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,974 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,975 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,976 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:50,977 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,978 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,979 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,980 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,981 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,982 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,983 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,984 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,985 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,986 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,987 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,988 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,989 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,990 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,991 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:50,991 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:50,991 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:50,991 [59657] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-21 12:29:56,872 [59657] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f0345e17c10>
2023-03-21 12:29:56,873 [59657] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f0345e17c10> on colorbar
2023-03-21 12:29:56,873 [59657] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-21 12:29:56,948 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:29:57,035 [59657] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-21 12:29:57,035 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,036 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,037 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,038 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,039 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,040 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:57,041 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:57,042 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,043 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,044 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,045 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,046 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,047 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,048 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,049 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,050 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,051 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,052 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,053 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,054 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,055 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,056 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,057 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,058 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,059 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-21 12:29:57,060 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 12:29:57,061 [59657] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 12:29:57,061 [59657] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-21 12:29:57,109 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:29:57,197 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:29:57,334 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:29:57,449 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:31:22,914 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/regression/linear_model.py
2023-03-21 12:31:22,933 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/__init__.py
2023-03-21 12:31:22,935 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/__init__.py
2023-03-21 12:31:22,939 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/wrapper.py
2023-03-21 12:33:19,109 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 12:33:19,110 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 12:33:19,110 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 12:33:19,111 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 12:33:19,111 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 12:33:19,120 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/numpy/__init__.py
2023-03-21 12:33:27,253 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 12:33:27,254 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 12:33:27,254 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 12:33:27,254 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 12:33:27,254 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 12:36:23,930 [59657] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f03460efbe0>
2023-03-21 12:36:23,930 [59657] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f03460efbe0> on colorbar
2023-03-21 12:36:23,930 [59657] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-21 12:36:23,961 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:36:24,009 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:36:24,043 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:36:24,080 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:36:24,116 [59657] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-21 12:48:44,288 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 12:48:44,289 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 4
2023-03-21 12:48:44,289 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:4]
2023-03-21 12:48:44,290 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-03-21 12:48:44,291 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:14:59,481 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:14:59,482 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 1
2023-03-21 13:14:59,482 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:1]
2023-03-21 13:14:59,483 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 13:14:59,483 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:15:34,230 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:15:34,231 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-03-21 13:15:34,231 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-03-21 13:15:34,232 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-21 13:15:34,233 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:15:36,097 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:15:36,098 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-03-21 13:15:36,098 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-03-21 13:15:36,098 [59657] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-03-21 13:15:36,099 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-03-21 13:15:36,100 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 3 (to 2 in part parser)
2023-03-21 13:15:36,100 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:15:52,201 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:15:52,202 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 4
2023-03-21 13:15:52,202 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-03-21 13:15:52,203 [59657] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:2] new[1:2]
2023-03-21 13:15:52,203 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:4]
2023-03-21 13:15:52,204 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 4 (to 3 in part parser)
2023-03-21 13:15:52,204 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:15:53,902 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:15:53,902 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-03-21 13:15:53,903 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-03-21 13:15:53,903 [59657] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:3] new[1:3]
2023-03-21 13:15:53,903 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2023-03-21 13:15:53,904 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 4 to 4 (to 3 in part parser)
2023-03-21 13:15:53,904 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:15:54,454 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:15:54,455 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-03-21 13:15:54,455 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-03-21 13:15:54,456 [59657] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:3] new[1:3]
2023-03-21 13:15:54,456 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2023-03-21 13:15:54,457 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 4 to 4 (to 3 in part parser)
2023-03-21 13:15:54,457 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:29:28,649 [59657] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 13:29:28,650 [59657] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 5
2023-03-21 13:29:28,650 [59657] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:5]
2023-03-21 13:29:28,652 [59657] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-03-21 13:29:28,652 [59657] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 13:29:28,659 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/formula/api.py
2023-03-21 13:29:28,677 [59657] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/model.py
2023-03-21 18:47:30,022 [77928] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-21 18:47:30,023 [77928] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-21 18:47:30,023 [77928] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-21 18:47:30,026 [77928] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-21 18:47:30,027 [77928] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-21 18:47:30,027 [77928] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-21 18:47:44,510 [77928] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-21 18:47:44,524 [77928] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-21 18:47:44,526 [77928] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-21 18:47:44,526 [77928] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-21 18:47:44,526 [77928] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-21 18:47:44,526 [77928] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', '__future__', 'tornado', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'numbers', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-21 18:47:44,565 [77928] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-21 18:47:44,568 [77928] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-21 18:47:44,711 [77928] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-21 18:47:44,717 [77928] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-21 18:47:55,971 [77928] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-03-21 18:47:55,971 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,971 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,972 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-21 18:47:55,973 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,974 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,975 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,976 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,977 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,978 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,979 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,980 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,981 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,982 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,983 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,984 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,985 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,986 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,987 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,988 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,989 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,990 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:55,991 [77928] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-03-21 18:47:59,190 [77928] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-03-21 18:47:59,190 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,191 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,192 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-21 18:47:59,193 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,194 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:59,195 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:59,196 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,197 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,198 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,199 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,200 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:59,201 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,202 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-21 18:47:59,203 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,204 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,205 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,206 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-21 18:47:59,207 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,208 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,209 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,210 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,211 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 18:47:59,212 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,212 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,212 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-21 18:47:59,212 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 18:47:59,212 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 18:47:59,212 [77928] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-03-21 19:01:15,102 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-21 19:01:15,104 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/__init__.py
2023-03-21 19:01:15,139 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/regression/linear_model.py
2023-03-21 19:01:15,151 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/__init__.py
2023-03-21 19:01:15,153 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/wrapper.py
2023-03-21 19:01:23,579 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:01:23,579 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:01:23,579 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:01:23,580 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:01:23,580 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:04:00,935 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:04:00,936 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:04:00,936 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:04:00,937 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:04:00,937 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:04:44,678 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:04:44,679 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:04:44,679 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:04:44,679 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:04:44,679 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:07:23,672 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:07:23,673 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:07:23,673 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:07:23,674 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:07:23,675 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:07:23,719 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/typing.py
2023-03-21 19:07:23,734 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2023-03-21 19:07:23,755 [77928] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-03-21 19:07:54,808 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:07:54,809 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:07:54,809 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:07:54,810 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:07:54,810 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:08:24,211 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:08:24,212 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:08:24,212 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:08:24,214 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:08:24,214 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:08:25,997 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:08:25,997 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:08:25,997 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:08:25,998 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:08:25,998 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 19:13:49,179 [77928] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-21 19:13:49,180 [77928] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-21 19:13:49,180 [77928] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-21 19:13:49,181 [77928] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-21 19:13:49,181 [77928] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-21 20:07:09,896 [77928] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4643154c40>
2023-03-21 20:07:09,897 [77928] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4643154c40> on colorbar
2023-03-21 20:07:09,897 [77928] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-21 20:07:10,098 [77928] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=22.0.
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,099 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,100 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-21 20:07:10,101 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-21 20:07:10,102 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,103 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,104 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,105 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-21 20:07:10,106 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,107 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,108 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,109 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,110 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,111 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,112 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,113 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,114 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,115 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,116 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,117 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,118 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,119 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,120 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-21 20:07:10,121 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,122 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,123 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,124 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,125 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,126 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-21 20:07:10,127 [77928] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=22.0 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-03-28 15:37:39,807 [9981] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-28 15:37:39,808 [9981] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-28 15:37:39,808 [9981] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-28 15:37:39,809 [9981] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-28 15:37:39,810 [9981] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-28 15:37:39,810 [9981] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-28 15:37:40,677 [9981] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-28 15:37:40,677 [9981] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-28 15:37:40,678 [9981] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-28 15:37:40,681 [9981] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-28 15:37:40,682 [9981] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-28 15:37:40,682 [9981] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-28 15:55:54,404 [9981] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-28 15:55:54,415 [9981] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-28 15:55:54,418 [9981] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-28 15:55:54,418 [9981] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-28 15:55:54,418 [9981] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-28 15:55:54,419 [9981] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', 'fnmatch', 'glob', '_socket', 'array', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'termios', 'getpass', 'platform', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'zipfile', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'configparser', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'pandas.io.formats.string', 'pandas.io.formats.html', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-28 15:55:54,451 [9981] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-28 15:55:54,453 [9981] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-28 15:55:54,572 [9981] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-28 15:55:54,573 [9981] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 15:56:29,286 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,287 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,288 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,289 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,290 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,291 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:56:29,292 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,293 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,294 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,295 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,296 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,297 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,298 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,299 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-28 15:56:29,300 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,301 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,302 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:56:29,302 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:56:29,302 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:56:29,302 [9981] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-28 15:57:02,329 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/pyplot.py
2023-03-28 15:58:27,233 [9981] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0.
2023-03-28 15:58:27,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,238 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,239 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,240 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,241 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,242 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,243 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-28 15:58:27,244 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,245 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,246 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,247 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-28 15:58:27,248 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 15:58:27,249 [9981] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-28 16:01:47,648 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 16:01:47,649 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 1
2023-03-28 16:01:47,649 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:9] new[1:1]
2023-03-28 16:01:47,650 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-28 16:01:47,650 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 16:01:47,723 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/frame.py
2023-03-28 16:01:47,786 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-28 16:01:47,789 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/__init__.py
2023-03-28 16:01:47,790 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/__init__.py
2023-03-28 16:01:47,856 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/generic.py
2023-03-28 16:01:47,885 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/base.py
2023-03-28 16:01:47,891 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/accessor.py
2023-03-28 16:01:47,927 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/indexing.py
2023-03-28 16:01:48,031 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/arraylike.py
2023-03-28 16:01:48,037 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/_typing.py
2023-03-28 16:01:48,060 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/typing.py
2023-03-28 16:01:48,071 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2023-03-28 16:01:48,079 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-03-28 16:01:48,096 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/types.py
2023-03-28 16:01:48,102 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/types.pyi
2023-03-28 16:01:48,138 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/series.py
2023-03-28 16:14:45,549 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 16:14:45,549 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-28 16:14:45,549 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-28 16:14:45,550 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-28 16:14:45,550 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 16:36:44,426 [9981] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,427 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,428 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,429 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,430 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,431 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,432 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,433 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,434 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,435 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,436 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,437 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:36:44,438 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,439 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,440 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,441 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,442 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,443 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:36:44,444 [9981] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-28 16:37:32,220 [9981] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0.
2023-03-28 16:37:32,220 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,220 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,220 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,221 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,222 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,223 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,224 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-28 16:37:32,225 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,226 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,227 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,228 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,229 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,230 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-28 16:37:32,231 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,232 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,233 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,234 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,235 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,236 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 16:37:32,237 [9981] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-28 16:37:33,133 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/axes/_axes.py:6731: RuntimeWarning: All-NaN slice encountered
  xmin = min(xmin, np.nanmin(xi))

2023-03-28 16:37:33,134 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/axes/_axes.py:6732: RuntimeWarning: All-NaN slice encountered
  xmax = max(xmax, np.nanmax(xi))

2023-03-28 16:51:52,441 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 16:51:52,442 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-28 16:51:52,442 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-28 16:51:52,443 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-28 16:51:52,443 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 17:24:19,645 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f45902bb760>
2023-03-28 17:24:19,646 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f45902bb760> on colorbar
2023-03-28 17:24:19,646 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-28 17:24:19,756 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:20,099 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:20,316 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:20,702 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:21,093 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:41,149 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4592de3490>
2023-03-28 17:24:41,149 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4592de3490> on colorbar
2023-03-28 17:24:41,150 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-28 17:24:41,300 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:41,644 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:41,868 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:42,265 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:24:42,602 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:32:59,549 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4590b83d30>
2023-03-28 17:32:59,550 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4590b83d30> on colorbar
2023-03-28 17:32:59,550 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-28 17:32:59,658 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:32:59,988 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:00,206 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:00,585 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:00,922 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:26,873 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4590a579a0>
2023-03-28 17:33:26,874 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4590a579a0> on colorbar
2023-03-28 17:33:26,874 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-28 17:33:26,941 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:27,047 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:27,119 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:27,225 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:33:27,314 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:34:03,044 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f459164aa30>
2023-03-28 17:34:03,044 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f459164aa30> on colorbar
2023-03-28 17:34:03,044 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-28 17:34:03,111 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:34:03,216 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:34:03,289 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:34:03,397 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:34:03,487 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:38:26,066 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 17:38:26,066 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 13
2023-03-28 17:38:26,066 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:13]
2023-03-28 17:38:26,068 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 13 (to 12 in part parser)
2023-03-28 17:38:26,069 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 17:38:27,088 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 17:38:27,088 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-03-28 17:38:27,089 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-03-28 17:38:27,089 [9981] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:12]
2023-03-28 17:38:27,089 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-03-28 17:38:27,090 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 13 to 13 (to 12 in part parser)
2023-03-28 17:38:27,090 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 17:38:39,015 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4590444e50>
2023-03-28 17:38:39,015 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f4590444e50> on colorbar
2023-03-28 17:38:39,015 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-28 17:38:39,093 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:38:39,215 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:38:39,299 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:38:39,425 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 17:38:39,534 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-28 18:30:51,517 [17054] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-28 18:30:51,519 [17054] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-28 18:30:51,519 [17054] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-28 18:30:51,522 [17054] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-28 18:30:51,522 [17054] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-28 18:30:51,522 [17054] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-28 18:30:59,827 [17054] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-28 18:30:59,842 [17054] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-28 18:30:59,844 [17054] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-28 18:30:59,845 [17054] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-28 18:30:59,845 [17054] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-28 18:30:59,845 [17054] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', 'fnmatch', 'glob', '_socket', 'array', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'termios', 'getpass', 'platform', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'zipfile', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'configparser', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-28 18:30:59,885 [17054] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-28 18:30:59,888 [17054] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-28 18:31:00,030 [17054] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-28 18:31:00,034 [17054] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-28 18:32:37,672 [17054] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-28 18:33:40,373 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/api.py
2023-03-28 18:36:17,669 [17054] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 18:36:17,670 [17054] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-28 18:36:17,670 [17054] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-28 18:36:17,671 [17054] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-28 18:36:17,671 [17054] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 18:36:19,598 [17054] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-28 18:36:19,599 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,600 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,601 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,602 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,603 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,604 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,605 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,606 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,607 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,608 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,609 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,610 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 18:36:19,611 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,612 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,613 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-28 18:36:19,614 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,615 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,616 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,617 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,618 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,619 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,620 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-28 18:36:19,621 [17054] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-03-28 18:37:11,266 [17054] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 18:37:11,267 [17054] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-28 18:37:11,267 [17054] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-28 18:37:11,268 [17054] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-28 18:37:11,268 [17054] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 18:37:11,303 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/regression/linear_model.py
2023-03-28 18:37:11,388 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-28 18:37:11,390 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/__init__.py
2023-03-28 18:37:11,393 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/__init__.py
2023-03-28 18:37:11,397 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/wrapper.py
2023-03-28 20:59:02,059 [17054] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-28 20:59:02,061 [17054] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-03-28 20:59:02,061 [17054] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-03-28 20:59:02,062 [17054] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-28 20:59:02,062 [17054] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-28 20:59:02,104 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/pyplot.py
2023-03-28 20:59:02,150 [17054] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-03-28 22:10:48,082 [9981] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-28 22:10:48,082 [9981] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-28 22:10:48,082 [9981] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-28 22:10:48,085 [9981] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-28 22:10:48,085 [9981] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-28 22:10:48,085 [9981] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-29 11:09:24,067 [9981] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-29 11:09:24,068 [9981] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-29 11:09:24,068 [9981] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-29 11:09:24,071 [9981] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-29 11:09:24,072 [9981] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-29 11:09:24,072 [9981] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-29 11:14:11,527 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:14:11,527 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 1
2023-03-29 11:14:11,528 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:13] new[1:1]
2023-03-29 11:14:11,529 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 11:14:11,529 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:16:32,822 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:16:32,823 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-03-29 11:16:32,823 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-03-29 11:16:32,825 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 11:16:32,826 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:28:13,968 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:28:13,969 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-03-29 11:28:13,969 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-03-29 11:28:13,970 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 11:28:13,970 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:28:21,547 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:28:21,547 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-03-29 11:28:21,547 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-03-29 11:28:21,549 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 11:28:21,549 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:40:20,185 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:40:20,186 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 18
2023-03-29 11:40:20,186 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-03-29 11:40:20,187 [9981] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-03-29 11:40:20,187 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:18]
2023-03-29 11:40:20,193 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 18 (to 17 in part parser)
2023-03-29 11:40:20,194 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:40:20,201 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/scipy/stats/__init__.py
2023-03-29 11:45:26,094 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:45:26,095 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 18; new: 2
2023-03-29 11:45:26,095 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:18] new[1:2]
2023-03-29 11:45:26,097 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 11:45:26,097 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:45:28,312 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:45:28,313 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-03-29 11:45:28,314 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-03-29 11:45:28,315 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 11:45:28,315 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-03-29 11:45:28,315 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:45:28,409 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:45:28,409 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-03-29 11:45:28,410 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-03-29 11:45:28,411 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 11:45:28,411 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-03-29 11:45:28,411 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:47:40,066 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 11:47:40,067 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-03-29 11:47:40,067 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-03-29 11:47:40,068 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 11:47:40,068 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 11:54:24,756 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f45a0da8f40>
2023-03-29 11:54:24,756 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f45a0da8f40> on colorbar
2023-03-29 11:54:24,756 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-29 11:54:24,833 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 11:54:24,963 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 11:54:25,050 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 11:54:25,186 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 11:54:25,311 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 12:00:34,645 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:00:34,646 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:00:34,647 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:00:34,647 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:00:34,648 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:00:34,727 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/discrete/discrete_model.py
2023-03-29 12:00:34,755 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/__init__.py
2023-03-29 12:00:34,758 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/regression/__init__.py
2023-03-29 12:00:34,802 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/regression/linear_model.py
2023-03-29 12:00:34,820 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/__init__.py
2023-03-29 12:00:34,825 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/statsmodels/base/wrapper.py
2023-03-29 12:02:11,988 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:02:11,989 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:02:11,989 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:02:11,990 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:02:11,990 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:02:13,818 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:02:13,819 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:02:13,819 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:02:13,820 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:02:13,820 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:02:14,823 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:02:14,823 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:02:14,823 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:02:14,824 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:02:14,824 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:10:59,569 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:10:59,570 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 8
2023-03-29 12:10:59,570 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:8]
2023-03-29 12:10:59,575 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-03-29 12:10:59,575 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:11:00,276 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:11:00,277 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2023-03-29 12:11:00,277 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-03-29 12:11:00,277 [9981] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:7] new[1:7]
2023-03-29 12:11:00,278 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2023-03-29 12:11:00,279 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 8 to 8 (to 7 in part parser)
2023-03-29 12:11:00,279 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:11:08,835 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:11:08,835 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 1
2023-03-29 12:11:08,836 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:1]
2023-03-29 12:11:08,836 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:11:08,837 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:13:08,237 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:13:08,238 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 8
2023-03-29 12:13:08,238 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:8]
2023-03-29 12:13:08,242 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-03-29 12:13:08,242 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:13:14,763 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:13:14,763 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 1
2023-03-29 12:13:14,764 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:1]
2023-03-29 12:13:14,764 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:13:14,765 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:22:27,784 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:22:27,785 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:22:27,785 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:22:27,786 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:22:27,786 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:22:34,108 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:22:34,108 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:22:34,109 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:22:34,109 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:22:34,110 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 12:22:35,611 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 12:22:35,612 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 12:22:35,612 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 12:22:35,612 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 12:22:35,612 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 13:08:13,764 [9981] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f459106bac0>
2023-03-29 13:08:13,764 [9981] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f459106bac0> on colorbar
2023-03-29 13:08:13,764 [9981] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-29 13:08:13,843 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 13:08:13,952 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 13:08:14,032 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 13:08:14,140 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 13:08:14,232 [9981] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 13:10:37,201 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 13:10:37,202 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 13:10:37,202 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 13:10:37,202 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 13:10:37,203 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 13:26:08,775 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 13:26:08,776 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 13:26:08,776 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 13:26:08,777 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 13:26:08,778 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 13:26:08,833 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/indexes/__init__.py
2023-03-29 13:26:08,838 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/indexes/api.py
2023-03-29 13:26:08,920 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/indexes/base.py
2023-03-29 13:26:09,007 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/numpy/__init__.py
2023-03-29 13:26:09,115 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/numpy/__init__.pyi
2023-03-29 13:26:09,200 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/abc.py
2023-03-29 13:26:09,203 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/abc.pyi
2023-03-29 13:26:09,223 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/flags.py
2023-03-29 13:26:09,232 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/_libs/__init__.py
2023-03-29 13:26:10,159 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/array_algos/putmask.py
2023-03-29 13:26:10,219 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/internals/blocks.py
2023-03-29 13:26:10,253 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/common.py
2023-03-29 13:26:10,595 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/arrays/__init__.py
2023-03-29 13:26:10,613 [9981] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/pandas/core/arrays/base.py
2023-03-29 13:26:13,921 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 13:26:13,922 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 13:26:13,922 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 13:26:13,923 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 13:26:13,924 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 14:53:49,014 [9981] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-29 14:53:49,014 [9981] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-29 14:53:49,014 [9981] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-29 14:53:49,019 [9981] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-29 14:53:49,019 [9981] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-29 14:53:49,020 [9981] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-29 15:53:26,529 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 15:53:26,530 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-03-29 15:53:26,530 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-03-29 15:53:26,530 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 15:53:26,531 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 15:56:21,709 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:21,750 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:21,796 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:21,844 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:21,892 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:21,950 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,003 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,054 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,103 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,156 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,203 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,245 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,285 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,322 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,368 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,413 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,464 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,510 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,557 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,603 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,643 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,688 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,735 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:56:22,775 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:30,534 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:30,916 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:31,293 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:31,674 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:32,037 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:32,443 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:32,863 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:33,333 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:33,727 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:34,070 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:34,402 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:34,730 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-29 15:58:45,828 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 15:58:45,829 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-03-29 15:58:45,829 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-03-29 15:58:45,830 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 15:58:45,830 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:02:10,485 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:02:10,486 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 4
2023-03-29 16:02:10,486 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:4]
2023-03-29 16:02:10,488 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-03-29 16:02:10,488 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:03:12,876 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:03:12,876 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 11
2023-03-29 16:03:12,877 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:11]
2023-03-29 16:03:12,879 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 11 (to 10 in part parser)
2023-03-29 16:03:12,879 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:03:18,191 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:03:18,191 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 9
2023-03-29 16:03:18,192 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:8] new[1:8]
2023-03-29 16:03:18,192 [9981] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:8] new[1:8]
2023-03-29 16:03:18,192 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[9:11] new[9:9]
2023-03-29 16:03:18,193 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 9 to 9 (to 8 in part parser)
2023-03-29 16:03:18,193 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:05:28,873 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:05:28,873 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 8
2023-03-29 16:05:28,873 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:9] new[1:8]
2023-03-29 16:05:28,875 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-03-29 16:05:28,875 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:06:18,215 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:06:18,215 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 11
2023-03-29 16:06:18,216 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-03-29 16:06:18,216 [9981] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:2] new[1:2]
2023-03-29 16:06:18,217 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 9 (to 10 in part parser)
2023-03-29 16:06:18,218 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:11]
2023-03-29 16:06:18,218 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 11 (to 10 in part parser)
2023-03-29 16:06:18,218 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:22:10,849 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:22:10,849 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 1
2023-03-29 16:22:10,850 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:11] new[1:1]
2023-03-29 16:22:10,851 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:22:10,851 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:23:09,859 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.
  warnings.warn(msg, category=FutureWarning)

2023-03-29 16:24:23,529 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:24:23,529 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:24:23,529 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:24:23,530 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:24:23,530 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:24:25,284 [9981] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.
  warnings.warn(msg, category=FutureWarning)

2023-03-29 16:24:37,042 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:24:37,043 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:24:37,043 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:24:37,044 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:24:37,044 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:25:12,106 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:25:12,107 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:25:12,107 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:25:12,108 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:25:12,108 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:26:07,102 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:26:07,103 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:26:07,103 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:26:07,104 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:26:07,104 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:26:11,941 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:26:11,941 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:26:11,941 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:26:11,942 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:26:11,942 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:28:58,403 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:28:58,403 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:28:58,404 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:28:58,405 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:28:58,405 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:29:02,292 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:29:02,292 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:29:02,293 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:29:02,294 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:29:02,294 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:29:17,495 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:29:17,495 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:29:17,495 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:29:17,496 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:29:17,496 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:43:29,012 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:43:29,013 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 16:43:29,013 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 16:43:29,014 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 16:43:29,014 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 16:43:32,273 [9981] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 16:43:32,274 [9981] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-03-29 16:43:32,274 [9981] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-03-29 16:43:32,275 [9981] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-03-29 16:43:32,275 [9981] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 17:23:41,235 [43830] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-29 17:23:41,236 [43830] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-29 17:23:41,236 [43830] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-29 17:23:41,238 [43830] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-29 17:23:41,239 [43830] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-29 17:23:41,239 [43830] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-29 17:23:46,609 [43830] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-29 17:23:46,620 [43830] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-29 17:23:46,625 [43830] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-29 17:23:46,625 [43830] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-29 17:23:46,625 [43830] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-29 17:23:46,625 [43830] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', 'fnmatch', 'glob', '_socket', 'array', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'termios', 'getpass', 'platform', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'zipfile', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'configparser', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-29 17:23:46,674 [43830] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-29 17:23:46,677 [43830] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-29 17:23:46,832 [43830] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-29 17:23:46,837 [43830] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-29 17:24:00,864 [43830] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0.
2023-03-29 17:24:00,865 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,865 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,866 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,867 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,868 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,869 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,870 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,871 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,872 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,873 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,874 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,875 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,876 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,877 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,878 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,879 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,880 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,881 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,882 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,883 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,884 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,885 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,886 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,887 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,888 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,889 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,890 [43830] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 17:24:00,898 [43830] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0.
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,899 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,900 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,901 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,902 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,903 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,904 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,905 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,906 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,907 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,908 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,909 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,910 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,911 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,912 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,913 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,914 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,915 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,916 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,917 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,918 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,919 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:00,920 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,921 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,922 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,923 [43830] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,951 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,952 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,953 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,954 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,955 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,956 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,957 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,958 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,959 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,960 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,961 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,962 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,963 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,964 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,965 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,966 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,967 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,968 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,969 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,970 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,971 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,972 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:00,973 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,974 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:00,975 [43830] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 17:24:07,704 [43830] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-29 17:24:07,704 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,704 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,705 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,706 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,707 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,708 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 17:24:07,709 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,710 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,711 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,712 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,713 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,714 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,715 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,716 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,717 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,718 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,719 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,720 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,721 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,722 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,723 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,724 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,725 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,726 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,727 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 17:24:07,728 [43830] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 17:24:14,956 [43830] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f9aa0634640>
2023-03-29 17:24:14,956 [43830] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f9aa0634640> on colorbar
2023-03-29 17:24:14,956 [43830] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-29 17:24:15,112 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:15,451 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:15,672 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:16,086 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:16,419 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:19,623 [43830] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f9aa01afc70>
2023-03-29 17:24:19,624 [43830] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f9aa01afc70> on colorbar
2023-03-29 17:24:19,624 [43830] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-29 17:24:19,707 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:19,832 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:19,905 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:20,012 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:20,104 [43830] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 17:24:44,979 [43830] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/base.py:561: FutureWarning: Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'. This behavior is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). Please convert your data to numeric values explicitly instead.
  X = check_array(X, **check_params)

2023-03-29 17:30:12,898 [43830] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-29 17:30:12,950 [43830] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-03-29 17:33:28,991 [43830] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 17:33:28,992 [43830] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 8
2023-03-29 17:33:28,992 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-03-29 17:33:28,996 [43830] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 5 in part parser)
2023-03-29 17:33:28,997 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-03-29 17:33:28,997 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[3:3] new[3:3]
2023-03-29 17:33:28,997 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[delete] old[4:4] new[4:3]
2023-03-29 17:33:28,997 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[5:6] new[4:5]
2023-03-29 17:33:28,998 [43830] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 6 (to 6 in part parser)
2023-03-29 17:33:28,998 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[6:8]
2023-03-29 17:33:28,999 [43830] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 8 (to 7 in part parser)
2023-03-29 17:33:29,000 [43830] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 17:34:21,763 [43830] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 17:34:21,764 [43830] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 11
2023-03-29 17:34:21,764 [43830] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:11]
2023-03-29 17:34:21,767 [43830] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 11 (to 10 in part parser)
2023-03-29 17:34:21,767 [43830] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 17:34:21,773 [43830] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/__init__.py
2023-03-29 17:34:21,775 [43830] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/model_selection/__init__.py
2023-03-29 17:34:21,813 [43830] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/typing.py
2023-03-29 17:34:21,830 [43830] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2023-03-29 17:35:19,568 [43830] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: 
605 fits failed out of a total of 605.
The score on these train-test partitions for these parameters will be set to nan.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
605 fits failed with the following error:
Traceback (most recent call last):
  File "/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/model_selection/_validation.py", line 681, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py", line 1461, in fit
    solver = _check_solver(self.solver, self.penalty, self.dual)
  File "/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py", line 447, in _check_solver
    raise ValueError(
ValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2023-03-29 17:35:19,576 [43830] WARNING  py.warnings:109: [JupyterRequire] /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/model_selection/_search.py:969: UserWarning: One or more of the test scores are non-finite: [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
 nan nan nan nan nan nan nan nan nan nan nan nan nan]
  warnings.warn(

2023-03-29 23:53:21,903 [57486] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-29 23:53:21,904 [57486] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-29 23:53:21,904 [57486] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-29 23:53:21,905 [57486] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-29 23:53:21,906 [57486] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-29 23:53:21,906 [57486] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-29 23:53:23,493 [57486] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-03-29 23:53:23,493 [57486] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-03-29 23:53:23,493 [57486] INFO     root:247: [JupyterRequire] Initializing comms.
2023-03-29 23:53:23,498 [57486] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-03-29 23:53:23,499 [57486] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-03-29 23:53:23,499 [57486] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-03-29 23:53:37,604 [57486] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data
2023-03-29 23:53:37,615 [57486] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=/home/eduard/.config/matplotlib
2023-03-29 23:53:37,618 [57486] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-03-29 23:53:37,618 [57486] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-03-29 23:53:37,618 [57486] DEBUG    matplotlib:1396: [JupyterRequire] platform is linux
2023-03-29 23:53:37,619 [57486] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', 'fnmatch', 'glob', '_socket', 'array', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'termios', 'getpass', 'platform', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'zipfile', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'configparser', 'optparse', 'pycodestyle', 'autopep8', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'numpy._distributor_init', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-03-29 23:53:37,653 [57486] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=/home/eduard/.cache/matplotlib
2023-03-29 23:53:37,656 [57486] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /home/eduard/.cache/matplotlib/fontlist-v330.json
2023-03-29 23:53:37,785 [57486] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-29 23:53:37,790 [57486] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-03-29 23:53:54,741 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0.
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,742 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,743 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,744 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,745 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,746 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,747 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,748 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,749 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,750 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,751 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,752 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,753 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,754 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,755 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,756 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,757 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,758 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,759 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=16.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 23:53:54,765 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0.
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,766 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,767 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,768 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,769 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,770 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,771 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,772 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,773 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,774 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,775 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,776 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,777 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,778 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,779 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,780 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,781 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,782 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=30.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0.
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,800 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,801 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,802 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,803 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,804 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,805 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,806 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,807 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,808 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,809 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,810 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,811 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,812 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,813 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 23:53:54,814 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,815 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:53:54,816 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=24.0 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 1.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 1.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-29 23:54:01,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 0.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-29 23:54:01,319 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Serif ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf') with score of 0.050000.
2023-03-29 23:54:05,931 [57486] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efee50784f0>
2023-03-29 23:54:05,931 [57486] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efee50784f0> on colorbar
2023-03-29 23:54:05,932 [57486] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-29 23:54:06,030 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:06,266 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:06,410 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:06,676 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:06,886 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:07,099 [57486] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efee491bd30>
2023-03-29 23:54:07,099 [57486] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efee491bd30> on colorbar
2023-03-29 23:54:07,099 [57486] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-29 23:54:07,145 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:07,215 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:07,263 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:07,338 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:54:07,403 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-29 23:56:42,788 [57486] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/model_selection/_search.py
2023-03-29 23:56:42,856 [57486] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2023-03-29 23:56:42,858 [57486] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/__init__.py
2023-03-29 23:56:42,865 [57486] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/sklearn/base.py
2023-03-29 23:56:54,615 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 23:56:54,616 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 23:56:54,616 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 23:56:54,617 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 23:56:54,617 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 23:57:05,455 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 23:57:05,456 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 23:57:05,456 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 23:57:05,457 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 23:57:05,457 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 23:57:24,583 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 23:57:24,583 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 23:57:24,584 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 23:57:24,584 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 23:57:24,584 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 23:57:35,599 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 23:57:35,600 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 23:57:35,600 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 23:57:35,601 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 23:57:35,601 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-29 23:57:48,380 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-29 23:57:48,381 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-29 23:57:48,381 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-29 23:57:48,382 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-29 23:57:48,382 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-30 00:01:26,877 [57486] WARNING  matplotlib.legend:1228: [JupyterRequire] No handles with labels found to put in legend.
2023-03-30 00:02:11,834 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-30 00:02:11,835 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 6
2023-03-30 00:02:11,835 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:6]
2023-03-30 00:02:11,837 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 6 (to 5 in part parser)
2023-03-30 00:02:11,838 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-30 00:02:11,871 [57486] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/pyplot.py
2023-03-30 00:02:42,061 [57486] WARNING  matplotlib.legend:1228: [JupyterRequire] No handles with labels found to put in legend.
2023-03-30 00:02:42,096 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,096 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,107 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,107 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,107 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,107 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,202 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,202 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,202 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,202 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 1.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,203 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,204 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,205 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,206 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,207 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,208 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,209 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,210 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,211 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,212 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,213 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,214 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,215 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,216 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,217 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXGeneral ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,218 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 1.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 0.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 1.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,219 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,220 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,221 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,222 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,223 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,224 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,225 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,226 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,227 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,228 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,229 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,230 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,231 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,232 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,233 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXGeneral ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,234 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 1.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 1.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 0.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,235 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-03-30 00:02:42,236 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,237 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,238 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,239 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,240 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,241 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,242 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,243 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,244 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,245 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,246 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,247 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,248 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,249 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=14.399999999999999 to STIXGeneral ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.050000.
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,250 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 1.335
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,251 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,252 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,253 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,254 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,255 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,256 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,257 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,258 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,259 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,260 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,261 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,262 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,263 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,264 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,265 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXNonUnicode ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 1.335
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,266 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 1.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 0.05
2023-03-30 00:02:42,267 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,268 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,269 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,270 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,271 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,272 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,273 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,274 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,275 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,276 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,277 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,278 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,279 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,280 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,281 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXNonUnicode ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 0.05
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,282 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 1.05
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 1.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,283 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,284 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,285 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,286 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,287 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,288 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,289 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,290 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-03-30 00:02:42,291 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,292 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,293 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,294 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,295 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,296 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,297 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,298 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=14.399999999999999 to STIXNonUnicode ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.050000.
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,299 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,300 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,301 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,302 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,303 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,304 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,305 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,306 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,307 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,308 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,309 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,310 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,311 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,312 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,313 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,314 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,315 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXSizeOneSym ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,316 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,317 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,318 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,319 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,320 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,321 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,322 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,323 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,324 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,325 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,326 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,327 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,328 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,329 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,330 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,331 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,332 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,333 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXSizeTwoSym ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,334 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,335 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,336 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,337 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,338 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,339 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,340 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,341 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,342 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,343 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,344 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,345 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,346 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,347 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,348 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,349 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,350 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXSizeThreeSym ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
2023-03-30 00:02:42,351 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,352 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,353 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,354 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,355 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,356 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,357 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,358 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,359 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,360 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,361 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,362 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,363 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,364 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,365 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,366 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,367 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,368 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXSizeFourSym ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,369 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,370 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,371 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,372 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,373 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,374 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,375 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,376 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,377 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,378 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,379 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,380 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,381 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,382 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,383 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,384 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,385 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to STIXSizeFiveSym ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,386 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,387 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,388 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,389 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,390 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,391 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,392 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,393 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,394 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,395 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,396 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,397 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,398 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,399 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,400 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,401 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,402 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,403 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmsy10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,404 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,405 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,406 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,407 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,408 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,409 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,410 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,411 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,412 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,413 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,414 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,415 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,416 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,417 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,418 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,419 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,420 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmr10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,421 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,422 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,423 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,424 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,425 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,426 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,427 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,428 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,429 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,430 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,431 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,432 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,433 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,434 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,435 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,436 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,437 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmtt10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,438 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,439 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,440 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,441 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,442 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,443 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,444 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,445 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,446 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,447 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,448 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,449 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,450 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,451 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,452 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,453 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,454 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,455 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmmi10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,456 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,457 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,458 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,459 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,460 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,461 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,462 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,463 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,464 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,465 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,466 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,467 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,468 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,469 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,470 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,471 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,472 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmb10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,473 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,474 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,475 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,476 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,477 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,478 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,479 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,480 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,481 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,482 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,483 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,484 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,485 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,486 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,487 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,488 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,489 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmss10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,490 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,491 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,492 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,493 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,494 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,495 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,496 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,497 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,498 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,499 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,500 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,501 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,502 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,503 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,504 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,505 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,506 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,507 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to cmex10 ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,508 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,509 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,510 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,511 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,512 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,513 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,514 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,515 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,516 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,517 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,518 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,519 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,520 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,521 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,522 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,523 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,524 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,525 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,525 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-03-30 00:02:42,525 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,526 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 0.43499999999999994
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,527 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,528 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,529 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,530 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,531 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,532 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,533 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,534 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,535 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,536 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,537 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,538 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,539 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,540 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,541 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2023-03-30 00:02:42,542 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,543 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2023-03-30 00:02:42,543 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,544 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,545 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2023-03-30 00:02:42,546 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2023-03-30 00:02:42,547 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2023-03-30 00:02:42,548 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
2023-03-30 00:02:42,551 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,551 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,551 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,551 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,552 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.05
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.05
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,553 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.62
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.145
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,554 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,555 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.62
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,556 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.145
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.43
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,557 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,558 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.05
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.4775
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,559 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,560 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,561 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.145
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,562 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.24
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.33499999999999996
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,563 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,564 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.24
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.43
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,565 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
2023-03-30 00:02:42,566 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.43
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.145
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.43
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,567 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.24
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
2023-03-30 00:02:42,568 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=14.399999999999999 to DejaVu Sans ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.050000.
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,569 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,570 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,571 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,572 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,573 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,574 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,575 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,576 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,577 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,578 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,579 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,580 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,581 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,582 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,583 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,584 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,585 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans Mono ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999.
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 0.05
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,586 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,587 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,588 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,589 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,590 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,591 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,592 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,593 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,594 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,595 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2023-03-30 00:02:42,596 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,597 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,598 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,599 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,600 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,601 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,602 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2023-03-30 00:02:42,603 [57486] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=14.399999999999999 to DejaVu Sans Display ('/home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
2023-03-30 00:02:42,716 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,716 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,717 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,717 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,718 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,718 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,743 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,743 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,744 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,744 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,744 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,744 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,752 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,753 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,753 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,754 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,754 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,754 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,792 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,792 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,793 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,793 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,793 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,793 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,800 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,801 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,801 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,801 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,802 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,802 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,825 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,825 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,826 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,826 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,827 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,827 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,834 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,834 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,835 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,835 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,835 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,835 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:42,892 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,893 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,893 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,894 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:42,894 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:42,894 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:02:43,061 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:43,062 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:43,062 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:43,062 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:02:43,063 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:02:43,063 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:11,811 [57486] WARNING  matplotlib.legend:1228: [JupyterRequire] No handles with labels found to put in legend.
2023-03-30 00:04:11,852 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:11,852 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:11,862 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:11,862 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:11,863 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:11,863 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:11,983 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:11,983 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:11,984 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:11,984 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:11,984 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:11,984 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,004 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,004 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,005 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,005 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,005 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,005 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,012 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,012 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,013 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,013 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,014 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,014 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,045 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,045 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,046 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,046 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,047 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,047 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,054 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,054 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,054 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,054 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,055 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,055 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,075 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,075 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,076 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,076 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,076 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,076 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,083 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,083 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,084 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,084 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,084 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,084 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,132 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,132 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,133 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,133 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,133 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,133 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:12,179 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,179 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,180 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,180 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:12,180 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:12,180 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,400 [57486] WARNING  matplotlib.legend:1228: [JupyterRequire] No handles with labels found to put in legend.
2023-03-30 00:04:16,438 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,439 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,448 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,448 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,449 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,449 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,565 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,565 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,566 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,566 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,566 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,566 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,586 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,586 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,587 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,587 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,587 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,587 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,594 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,594 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,595 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,595 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,595 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,595 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,627 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,627 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,628 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,628 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,628 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,628 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,635 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,635 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,636 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,636 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,636 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,636 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,656 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,656 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,657 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,657 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,657 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,657 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,665 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,665 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,666 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,666 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,666 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,667 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,716 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,716 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,717 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,717 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,717 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,717 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:16,762 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,762 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,763 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,763 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:16,763 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:16,764 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,003 [57486] WARNING  matplotlib.legend:1228: [JupyterRequire] No handles with labels found to put in legend.
2023-03-30 00:04:43,036 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,036 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,044 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,044 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,045 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,045 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,165 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,166 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,166 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,166 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,167 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,167 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,198 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,198 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,198 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,199 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,199 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,199 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,206 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,206 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,207 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,207 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,207 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,207 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,239 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,239 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,240 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,240 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,240 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,240 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,247 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,247 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,248 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,248 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,248 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,248 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,268 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,268 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,269 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,269 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,269 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,270 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,276 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,276 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,277 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,277 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,277 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,278 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,328 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,328 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,329 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,329 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,330 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,330 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:04:43,379 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,379 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,380 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,380 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:04:43,380 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:04:43,380 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,449 [57486] WARNING  matplotlib.legend:1228: [JupyterRequire] No handles with labels found to put in legend.
2023-03-30 00:05:09,481 [57486] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efee0820e20>
2023-03-30 00:05:09,481 [57486] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efee0820e20> on colorbar
2023-03-30 00:05:09,481 [57486] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-03-30 00:05:09,517 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,517 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,528 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,528 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,528 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,528 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,642 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,642 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,643 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,643 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,643 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,643 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,660 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-30 00:05:09,673 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,673 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,674 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,674 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,674 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,674 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,681 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,681 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,682 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,682 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,682 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,682 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,713 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-30 00:05:09,719 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,719 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,720 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,720 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,720 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,720 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,727 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,727 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,728 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,728 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,728 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,728 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,752 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,752 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,752 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,753 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,753 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,753 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,760 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,760 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,761 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,761 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,761 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,761 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,792 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-30 00:05:09,814 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,814 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,815 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,815 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,815 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,816 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,860 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,860 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,861 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,861 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02,
       1.e+03, 1.e+04])
2023-03-30 00:05:09,862 [57486] DEBUG    matplotlib.ticker:2471: [JupyterRequire] vmin 0.0005623413251903491 vmax 177.82794100389228
2023-03-30 00:05:09,862 [57486] DEBUG    matplotlib.ticker:2529: [JupyterRequire] ticklocs array([2.e-05, 3.e-05, 4.e-05, 5.e-05, 6.e-05, 7.e-05, 8.e-05, 9.e-05,
       2.e-04, 3.e-04, 4.e-04, 5.e-04, 6.e-04, 7.e-04, 8.e-04, 9.e-04,
       2.e-03, 3.e-03, 4.e-03, 5.e-03, 6.e-03, 7.e-03, 8.e-03, 9.e-03,
       2.e-02, 3.e-02, 4.e-02, 5.e-02, 6.e-02, 7.e-02, 8.e-02, 9.e-02,
       2.e-01, 3.e-01, 4.e-01, 5.e-01, 6.e-01, 7.e-01, 8.e-01, 9.e-01,
       2.e+00, 3.e+00, 4.e+00, 5.e+00, 6.e+00, 7.e+00, 8.e+00, 9.e+00,
       2.e+01, 3.e+01, 4.e+01, 5.e+01, 6.e+01, 7.e+01, 8.e+01, 9.e+01,
       2.e+02, 3.e+02, 4.e+02, 5.e+02, 6.e+02, 7.e+02, 8.e+02, 9.e+02,
       2.e+03, 3.e+03, 4.e+03, 5.e+03, 6.e+03, 7.e+03, 8.e+03, 9.e+03,
       2.e+04, 3.e+04, 4.e+04, 5.e+04, 6.e+04, 7.e+04, 8.e+04, 9.e+04])
2023-03-30 00:05:09,881 [57486] DEBUG    matplotlib.axes._base:2820: [JupyterRequire] top of axes not in the figure, so title not moved
2023-03-30 00:06:26,240 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-30 00:06:26,241 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 1
2023-03-30 00:06:26,241 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:6] new[1:1]
2023-03-30 00:06:26,242 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-30 00:06:26,242 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-30 00:10:03,929 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-30 00:10:03,929 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-30 00:10:03,930 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-30 00:10:03,930 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-30 00:10:03,930 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-30 00:10:03,959 [57486] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: /home/eduard/anaconda3/envs/python/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2023-03-30 00:10:06,974 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-30 00:10:06,976 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-30 00:10:06,976 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-30 00:10:06,977 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-30 00:10:06,977 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-30 00:10:10,568 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-30 00:10:10,568 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-30 00:10:10,568 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-30 00:10:10,569 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-30 00:10:10,569 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-03-30 00:10:15,738 [57486] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-03-30 00:10:15,739 [57486] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-03-30 00:10:15,739 [57486] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-03-30 00:10:15,740 [57486] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-03-30 00:10:15,740 [57486] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
